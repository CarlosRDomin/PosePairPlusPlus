syntax = "proto3";

option java_multiple_files = true;
//option optimize_for = LITE_RUNTIME;
option java_package = "cmu.posepair.protos";
option java_outer_classname = "PosePairProto";
option objc_class_prefix = "PPP";

package posepair;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";


service SensorDataReceiver {
  // StreamWatchData implements the smartwatch (client) side of the sensor data streaming
  rpc StreamWatchData(stream posepair.WatchDataBlock) returns (google.protobuf.Empty) {}
  rpc StreamHumanPose(stream posepair.HumanPose) returns (google.protobuf.Empty) {}
}


// WatchDataBlock encodes a block of sensor data from the watch, together with all relevant sensor attributes (watch ID, sampling freq, timestamp...)
message WatchDataBlock {
  string watch_id = 1;                      // Watch unique id (to tell them apart)
  float F_samp = 2;                         // Frequency at which values were sampled
  google.protobuf.Timestamp t_latest = 3;   // Timestamp of the last sample in linAccel
  repeated float linAccel_x = 4;            // x-axis linear acceleration data
  repeated float linAccel_y = 5;            // y-axis linear acceleration data
  repeated float linAccel_z = 6;            // z-axis linear acceleration data
}

// WatchDataBlock encodes a block of sensor data from the watch, together with all relevant sensor attributes (watch ID, sampling freq, timestamp...)
message HumanPose {
  int32 person_id = 1;                      // Person unique id (to tell them apart)
  google.protobuf.Timestamp t = 2;          // Timestamp at which the frame was grabbed
  repeated float pos_x = 3;                 // x-axis position of the joints
  repeated float pos_y = 4;                 // y-axis position of the joints
  repeated float joint_confidence = 5;      // Confidence of each detected joint
}
